generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String  @id @default(uuid())
  clerkId   String  @unique @map("clerk_id")
  email     String  @unique
  avatarUrl String? @map("avatar_url")
  firstName String? @map("first_name")
  lastName  String? @map("last_name")
  bio       String?

  posts     Post[]     @relation(name: "author")
  reactions Reaction[]
  views     View[]
  comments  Comment[]

  updatedAt DateTime  @updatedAt @map("updated_at")
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("users")
}

model Post {
  id String @id @default(uuid())

  title        String
  description  String   @default("")
  tags         String[] @default([])
  thumbnailUrl String?  @map("thumbnail_url")
  body         String   @default("")

  publicationDate DateTime? @map("publication_date")
  isPublished     Boolean   @default(false) @map("is_published")

  author   User   @relation(name: "author", fields: [authorId], references: [id])
  authorId String @map("author_id")

  modifiedAt DateTime  @default(now()) @map("modified_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  deletedAt  DateTime? @map("deleted_at")

  // analytics
  reactions Reaction[]
  views     View[]

  comments Comment[]

  @@map("posts")
}

model Comment {
  id      String  @id @default(uuid())
  user    User    @relation(fields: [userId], references: [id])
  userId  String  @map("user_id")
  post    Post    @relation(fields: [postId], references: [id])
  postId  String  @map("post_id")
  content String
  title   String?

  reactions Reaction[]

  parent   Comment? @relation("replies", fields: [parentId], references: [id])
  parentId String?  @map("parent_id")

  replies Comment[] @relation("replies")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("comments")
}

model Reaction {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @map("post_id")
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?  @map("comment_id")
  isLike    Boolean

  createdAt DateTime @default(now()) @map("createdAt")

  @@map("reactions")
}

model View {
  id       String   @id @default(uuid())
  user     User?    @relation(fields: [userId], references: [id])
  userId   String?  @map("user_id")
  post     Post     @relation(fields: [postId], references: [id])
  postId   String   @map("post_id")
  viewedAt DateTime @default(now()) @map("viewed_at")

  @@map("views")
}
